<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <!--
  Style note:
  
  Properties, items and targets named with an underscore ('_') prefix are considered internal and not inteded for reference
  outside this file. Other propeties, items and targets are intented to be set or referenced elsewhere, as appropriate.    
  -->
  <Import Project="$(MSBuildThisFileDirectory)WixNuGetPackager.tasks" />
  
  <PropertyGroup>
    <WixNuGetPackagerEnabled Condition=" $(WixNuGetPackagerEnabled) == '' ">true</WixNuGetPackagerEnabled>
    <WixNuGetPackagerCopyOutputToOutputDirectory Condition=" $(WixNuGetPackagerCopyOutputToOutputDirectory) == '' ">true</WixNuGetPackagerCopyOutputToOutputDirectory>    
    <WixNuGetPackagerDownloadNuGetExe Condition=" $(WixNuGetPackagerDownloadNuGetExe) == '' and $(WixNuGetPackagerNuGetExePath) == '' ">true</WixNuGetPackagerDownloadNuGetExe>
    <WixNuGetPackagerDownloadNuGetExe Condition=" $(WixNuGetPackagerDownloadNuGetExe) == '' and $(WixNuGetPackagerNuGetExePath) != '' ">false</WixNuGetPackagerDownloadNuGetExe>
    <!-- Emulate the defaulting behaviour from Microsoft.Common.targets. This is used when copying files to output. -->
    <SkipCopyUnchangedFiles Condition="'$(SkipCopyUnchangedFiles)' == ''">true</SkipCopyUnchangedFiles>
  </PropertyGroup>
  
  <!-- Initialize various internal properties. -->
  <PropertyGroup>
    <_WixNuGetPackager_IntermediateDirectory>$(MSBuildProjectDirectory)\$(IntermediateOutputPath)_WixNuGetPackager\</_WixNuGetPackager_IntermediateDirectory>   
    <_WixNuGetPackager_IntermediateNuGetPackOutputDirectory>$(_WixNuGetPackager_IntermediateDirectory)PackOutput\</_WixNuGetPackager_IntermediateNuGetPackOutputDirectory>
    <_WixNuGetPackager_IntermediateBuildFilesDirectory>$(_WixNuGetPackager_IntermediateDirectory)Build\</_WixNuGetPackager_IntermediateBuildFilesDirectory>
    <_WixNuGetPackager_EmitDirectory>$(MSBuildThisFileDirectory)..\tools\emit\</_WixNuGetPackager_EmitDirectory>
    <_WixNuGetPackager_DownloadedNuGetExePath>$(MSBuildThisFileDirectory)..\tools\nuget.exe</_WixNuGetPackager_DownloadedNuGetExePath>
    <_WixNuGetPackager_PackageCreatedSuccessFile>$(_WixNuGetPackager_IntermediateDirectory)PackageCreated.success</_WixNuGetPackager_PackageCreatedSuccessFile>
    <_WixNuGetPackager_PackageIdDotTargetsFile>$(_WixNuGetPackager_EmitDirectory)build\package_id.targets</_WixNuGetPackager_PackageIdDotTargetsFile>    
    <_WixNuGetPackager_PackageIdDotPropsFile>$(_WixNuGetPackager_EmitDirectory)build\package_id.props</_WixNuGetPackager_PackageIdDotPropsFile>    
  </PropertyGroup>

  <!-- Compute and initialize various configuration properties and items that can reasonably depend on preceding target execution,
       validate basic configuration, ensure directories we may write to exist. -->
  <Target
    Name="WixNuGetPackagerPrepare"
    DependsOnTargets="ResolveAssemblyReference"
    BeforeTargets="Build"
    Condition=" $(WixNuGetPackagerEnabled) == 'true' ">
    
    <ItemGroup 
      Condition=" $(WixNuGetPackagerProjectType) == '' ">
      <_WixNuGetPackager_WixDllReference
        Include="@(ReferencePath)"
        Condition=" '%(Filename)%(Extension)' == 'wix.dll' and $([System.String]::Copy( '%(FusionName)' ).Contains( 'ce35f76fcda82bad')) "/>
    </ItemGroup>

    <PropertyGroup 
      Condition=" $(WixNuGetPackagerProjectType) == '' ">
      <WixNuGetPackagerProjectType      
        Condition=" $(MSBuildProjectExtension) == '.wixproj' and
                    $(OutputType) == 'Library' and
                    ( $(WixTargetsPath) != '' or $(WixNuGetPackagerDisableWixTargetsPathCheck) == 'true' ) ">Library</WixNuGetPackagerProjectType>
      <WixNuGetPackagerProjectType      
        Condition=" $(MSBuildProjectExtension) != '.wixproj' and
                    $(OutputType) == 'Library' and
                    ( @(_WixNuGetPackager_WixDllReference) != '' ) ">Extension</WixNuGetPackagerProjectType>
    </PropertyGroup>

    <PropertyGroup>
      <WixNuGetPackagerOutputDirectory Condition=" $(WixNuGetPackagerOutputDirectory) == '' ">$(OutDir)</WixNuGetPackagerOutputDirectory>
    </PropertyGroup>
    
    <Error
      Condition=" $(WixNuGetPackagerProjectType) == '' "
      Text="The WiX project type could not be determined. Is this a WiX project?" />
    
    <Message
      Importance="High"
      Text="WixNuGetPackagerProjectType is $(WixNuGetPackagerProjectType)"/>
      
    <Error
      Condition=" $(WixNuGetPackagerProjectType) != 'Library' and  $(WixNuGetPackagerProjectType) != 'Extension' "
      Text="WixNuGetPackagerProjectType must be 'Library' (for wixlib projects) or 'Extension' (for wix extension projects)." />
      
    <Error
      Condition=" $(WixNuGetPackagerDownloadNuGetExe) != 'true' and !Exists( '$(WixNuGetPackagerNuGetExePath)' ) "
      Text="The nuget.exe path configured by the WixNuGetPackagerNuGetExePath property, '$(WixNuGetPackagerNuGetExePath)', could not be found. You must set WixNuGetPackagerNuGetExePath or set WixNuGetPackagerDownloadNuGetExe to 'true'."/>
    
    <!--
    Note: The following comment and task call is based on NuGet's standard NuGet.targets
    
    Take advantage of MsBuild's build dependency tracking to make sure that we only ever download nuget.exe once.
    This effectively acts as a lock that makes sure that the download operation will only happen once and all
    parallel builds will have to wait for it to complete.
    -->
    <MsBuild 
      Targets="_WixNuGetPackager_DownloadNuGet" 
      Projects="$(MSBuildThisFileDirectory)NuGetDownload.targets" 
      Properties="Configuration=NOT_IMPORTANT;WixNuGetPackagerDownloadNuGetExe=$(WixNuGetPackagerDownloadNuGetExe);_WixNuGetPackager_DownloadedNuGetExePath=$(_WixNuGetPackager_DownloadedNuGetExePath)" />
    
    <Warn
      Condition=" $(OutputType) != 'Library' and $(LibBindFiles) != 'true' "
      Text="Library file binding is not enabled. Any referenced files (including custom action DLLs) will not be available to consumers of the generated nuget package." />
    
    <ItemGroup>
      <_WixNuGetPackager_MetadataNuspecContentItems
        Include="@(Content)"
        Condition=" '%(Content.Filename)' == 'NuGetPackageMetadata' and '%(Content.Extension)' == '.nuspec' "/>
    </ItemGroup>
    
    <PropertyGroup>
      <WixNuGetPackageId Condition=" $(WixNuGetPackageId) == '' and $(WixNuGetPackagerProjectType) == 'Library' ">$(WixNuGetPackageIdPrefix)$(OutputName)$(WixNuGetPackageIdSuffix)</WixNuGetPackageId>    
      <WixNuGetPackageId Condition=" $(WixNuGetPackageId) == '' and $(WixNuGetPackagerProjectType) == 'Extension' ">$(WixNuGetPackageIdPrefix)$(AssemblyName)$(WixNuGetPackageIdSuffix)</WixNuGetPackageId>    
      <WixNuGetPackagerNuGetExePath Condition=" $(WixNuGetPackagerDownloadNuGetExe) == 'true' ">$(_WixNuGetPackager_DownloadedNuGetExePath)</WixNuGetPackagerNuGetExePath>
      <_WixNuGetPackager_NuGetCommand Condition=" '$(OS)' == 'Windows_NT'">"$(WixNuGetPackagerNuGetExePath)"</_WixNuGetPackager_NuGetCommand>
      <_WixNuGetPackager_NuGetCommand Condition=" '$(OS)' != 'Windows_NT' ">mono --runtime=v4.0.30319 "$(WixNuGetPackagerNuGetExePath)"</_WixNuGetPackager_NuGetCommand>
      <_WixNuGetPackager_MetadataNuspecContentItems>@(_WixNuGetPackager_MetadataNuspecContentItems->'%(FullPath)')</_WixNuGetPackager_MetadataNuspecContentItems>
      <_WixNuGetPackager_MetadataNuspecContentItems_HasMultiple Condition=" $(_WixNuGetPackager_MetadataNuspecContentItems.IndexOf(';')) &gt; -1 ">true</_WixNuGetPackager_MetadataNuspecContentItems_HasMultiple>
      <WixNuGetPackagerMetadataNuspecFilePath Condition=" $(WixNuGetPackagerMetadataNuspecFilePath) == '' and $(_WixNuGetPackager_MetadataNuspecContentItems) != '' and $(_WixNuGetPackager_MetadataNuspecContentItems_HasMultiple) != 'true' ">$(_WixNuGetPackager_MetadataNuspecContentItems)</WixNuGetPackagerMetadataNuspecFilePath>
      <_WixNuGetPackager_RenamedPackageIdDotTargetsFile>$(_WixNuGetPackager_IntermediateBuildFilesDirectory)$(WixNuGetPackageId).targets</_WixNuGetPackager_RenamedPackageIdDotTargetsFile>
      <_WixNuGetPackager_RenamedPackageIdDotPropsFile>$(_WixNuGetPackager_IntermediateBuildFilesDirectory)$(WixNuGetPackageId).props</_WixNuGetPackager_RenamedPackageIdDotPropsFile>
      <_WixNuGetPackager_GeneratedNuspecFile>$(_WixNuGetPackager_IntermediateDirectory)$(WixNuGetPackageId).nuspec</_WixNuGetPackager_GeneratedNuspecFile>
    </PropertyGroup>
        
    <Error
      Condition=" $(WixNuGetPackagerMetadataNuspecFilePath) != '' and !Exists( '$(WixNuGetPackagerMetadataNuspecFilePath)' ) "
      Text="The file referenced by WixNuGetPackagerMetadataNuspecFilePath, '$(WixNuGetPackagerMetadataNuspecFilePath)', does not exist."/>
          
    <Error
      Condition=" $(WixNuGetPackagerMetadataNuspecFilePath) == '' "
      Text="You must provide NuGet package metadata for the generated package in a nuspec file. Either add a content item with filename 'NuGetPackageMetadata.nuspec' to the project, or set property WixNuGetPackagerMetadataNuspecFilePath. A template nuspec file can be found at: $([System.IO.Path]::GetFullPath( '$(MSBuildThisFileDirectory)\..\tools\NuGetPackageMetadata.nuspec.template' ))" />
      
    <MakeDir
      Directories="$(_WixNuGetPackager_IntermediateDirectory)"
      Condition=" !Exists( '$(_WixNuGetPackager_IntermediateDirectory)' ) "/>
      
    <MakeDir
      Directories="$(_WixNuGetPackager_IntermediateNuGetPackOutputDirectory)"
      Condition=" !Exists( '$(_WixNuGetPackager_IntermediateNuGetPackOutputDirectory)' ) "/>
      
    <MakeDir
      Directories="$(_WixNuGetPackager_IntermediateBuildFilesDirectory)"
      Condition=" !Exists( '$(_WixNuGetPackager_IntermediateBuildFilesDirectory)' ) "/>

    <MakeDir
      Directories="$(WixNuGetPackagerOutputDirectory)"
      Condition=" !Exists( '$(WixNuGetPackagerOutputDirectory)' ) "/>
      
  </Target>
  
  <!-- Copy the package_id.targets file to the intermediate directory, but renamed
       with the actual package id. This file must be correctly named to be picked
       up by nuget's automatic .props/.targets injection feature. -->       
  <Target
    Name="_WixNuGetPackager_CreateRenamedPackageBuildFiles" 
    Inputs="$(_WixNuGetPackager_PackageIdDotTargetsFile);$(_WixNuGetPackager_PackageIdDotPropsFile)"
    Outputs="$(_WixNuGetPackager_RenamedPackageIdDotTargetsFile);$(_WixNuGetPackager_RenamedPackageIdDotPropsFile)"
    DependsOnTargets="WixNuGetPackagerPrepare"
    BeforeTargets="_CleanGetCurrentAndPriorFileWrites"
    Condition=" $(WixNuGetPackagerEnabled) == 'true' ">
  
    <ItemGroup>
      <_WixNuGetPackager_BuildFilesReplacements Include="1">
        <Find>_WIXNUGETPACKAGER_IDPREFIX_</Find>
        <ReplaceWith>_WNP_$(WixNuGetPackageId.Replace('.','_').Replace('-','_').Replace('$','_'))_</ReplaceWith>
      </_WixNuGetPackager_BuildFilesReplacements>
      <_WixNuGetPackager_BuildFilesReplacements Include="2">
        <Find>$$WIXNUGETPACKAGER_PACKAGETYPE$$</Find>
        <ReplaceWith>$(WixNuGetPackagerProjectType)</ReplaceWith>
      </_WixNuGetPackager_BuildFilesReplacements>
      <_WixNuGetPackager_BuildFilesReplacements Include="3">
        <Find>$$WIXNUGETPACKAGER_PACKAGEID$$</Find>
        <ReplaceWith>$(WixNuGetPackageId)</ReplaceWith>
      </_WixNuGetPackager_BuildFilesReplacements>      
    </ItemGroup>
    
    <_ReplaceTextTransform
      InputFiles="$(_WixNuGetPackager_PackageIdDotTargetsFile);$(_WixNuGetPackager_PackageIdDotPropsFile)"
      OutputFiles="$(_WixNuGetPackager_RenamedPackageIdDotTargetsFile);$(_WixNuGetPackager_RenamedPackageIdDotPropsFile)"
      Replacements="@(_WixNuGetPackager_BuildFilesReplacements)"/>
    
    <ItemGroup>
      <FileWrites Include="$(_WixNuGetPackager_RenamedPackageIdDotTargetsFile);$(_WixNuGetPackager_RenamedPackageIdDotPropsFile)"/>
    </ItemGroup>
    
  </Target>

  <!-- Create the nuspec file that will be used to create the nuget package. -->
  <Target
    Name="_WixNuGetPackager_CreateNuspecFile" 
    Inputs="$(WixNuGetPackagerMetadataNuspecFilePath)"
    Outputs="$(_WixNuGetPackager_GeneratedNuspecFile)"
    DependsOnTargets="WixNuGetPackagerPrepare"
    BeforeTargets="_CleanGetCurrentAndPriorFileWrites"
    Condition=" $(WixNuGetPackagerEnabled) == 'true' ">

    <XmlPeek 
      XmlInputPath="$(WixNuGetPackagerMetadataNuspecFilePath)"
      Query="/package/metadata[1]">
             
      <Output TaskParameter="Result"
              ItemName="_WixNuGetPackager_MetadataElement" />
    </XmlPeek>

    <PropertyGroup>
      <_WixNuGetPackager_MetadataElement>
        @(_WixNuGetPackager_MetadataElement)
      </_WixNuGetPackager_MetadataElement>
    </PropertyGroup>
    
    <Error
      Condition=" $(_WixNuGetPackager_MetadataElement) == '' "
      Text="The nuspec file '$(WixNuGetPackagerMetadataNuspecFilePath)' does not contain a &lt;metadata> element." />

    <!-- If this is an Extension project, include any .xsd (XML Schema) embedded resource files so these can be added to the target project
         to enable intellisense in Visual Studio. Items can also be added explicitly by the project if required. -->
    <ItemGroup
      Condition=" $(WixNuGetPackagerProjectType) == 'Extension' ">
      <WixNuGetPackagerExtensionSchema
        Include="@(EmbeddedResource)"
        Condition=" %(Extension) == '.xsd' and %(EmbeddedResource.Link) == '' ">
        <UseRelativeDir>$([MSBuild]::MakeRelative( '$(MSBuildProjectDirectory)', '%(RootDir)%(Directory)' ))</UseRelativeDir>
      </WixNuGetPackagerExtensionSchema>
      <WixNuGetPackagerExtensionSchema
        Include="@(EmbeddedResource)"
        Condition=" %(Extension) == '.xsd' and %(EmbeddedResource.Link) != '' ">
        <UseRelativeDir>$([System.IO.Path]::GetDirectoryName( '%(EmbeddedResource.Link)' )</UseRelativeDir>
      </WixNuGetPackagerExtensionSchema>
    </ItemGroup>
    
    <Message Condition=" '@(Resource)' != '' "
        Importance="High" 
        Text="Resources found: @(Resource)" />
    
    <ItemGroup
      Condition=" $(WixNuGetPackagerProjectType) == 'Library' and '@(Resource)' != '' ">
        <WixNuGetPackagerLibraryFiles
            Include="@(Resource)"
            Condition=" %(Extension) != '.xsd' and %(Resource.Link) == '' ">
            <UseRelativeDir>$([MSBuild]::MakeRelative( '$(MSBuildProjectDirectory)', '%(RootDir)%(Directory)' ))</UseRelativeDir>
        </WixNuGetPackagerLibraryFiles>
        <WixNuGetPackagerLibraryFiles
            Include="@(Resource)"
            Condition=" %(Extension) != '.xsd' and %(Resource.Link) != '' ">
            <UseRelativeDir>$([System.IO.Path]::GetDirectoryName( '%(Resource.Link)' )</UseRelativeDir>
        </WixNuGetPackagerLibraryFiles>
    </ItemGroup>
    
    <Message Condition=" '@(WixNuGetPackagerLibraryFiles)' != '' "
        Importance="High" 
        Text="Unfiltered Library resources to include: @(WixNuGetPackagerLibraryFiles)" />
    
    <RemoveDuplicates
      Condition=" $(WixNuGetPackagerProjectType) == 'Extension' and '@(WixNuGetPackagerExtensionSchema)' != '' "
      Inputs="@(WixNuGetPackagerExtensionSchema)">
    
      <Output
        TaskParameter="Filtered"
        ItemName="_WixNuGetPackager_ExtensionSchemaUnique"/>
        
    </RemoveDuplicates>
    
    <RemoveDuplicates
      Condition=" $(WixNuGetPackagerProjectType) == 'Library' and '@(WixNuGetPackagerLibraryFiles)' != '' "
      Inputs="@(WixNuGetPackagerLibraryFiles)">
    
      <Output
        TaskParameter="Filtered"
        ItemName="_WixNuGetPackager_LibraryFilesUnique"/>
    </RemoveDuplicates>
    
    <Message Condition=" '@(_WixNuGetPackager_LibraryFilesUnique)' != '' "
        Importance="High" 
        Text="Library resources to include: @(_WixNuGetPackager_LibraryFilesUnique)" />
    
    <!-- Construct nuspec xml -->
    <PropertyGroup>
      <_WixNuGetPackager_ExtensionSchemaFilesXml
        Condition=" $(WixNuGetPackagerProjectType) == 'Extension' and '@(_WixNuGetPackager_ExtensionSchemaUnique)' != '' " >
        @(_WixNuGetPackager_ExtensionSchemaUnique->'&lt;file src="%(FullPath)" target="tools\payload\schema\%(UseRelativeDir)" /&gt;','')
      </_WixNuGetPackager_ExtensionSchemaFilesXml>
      <_WixNuGetPackager_LibraryFilesXml
        Condition=" $(WixNuGetPackagerProjectType) == 'Library' and '@(_WixNuGetPackager_LibraryFilesUnique)' != '' " >
        @(_WixNuGetPackager_LibraryFilesUnique->'&lt;file src="%(FullPath)" target="tools\payload\output\%(UseRelativeDir)" /&gt;','')
      </_WixNuGetPackager_LibraryFilesXml>
      <_WixNuGetPackager_NuspecXml>
        <package xmlns="">
          $(_WixNuGetPackager_MetadataElement)
          <files>
            <file src="$(TargetPath)" target="tools\payload\output" />
            $(_WixNuGetPackager_ExtensionSchemaFilesXml)
            <file src="$(_WixNuGetPackager_IntermediateBuildFilesDirectory)**" target="build" />
            $(_WixNuGetPackager_LibraryFilesXml)
          </files>
        </package>
      </_WixNuGetPackager_NuspecXml>
    </PropertyGroup>
    
    <WriteLinesToFile
      File="$(_WixNuGetPackager_GeneratedNuspecFile)"
      Lines="$(_WixNuGetPackager_NuspecXml)"
      Overwrite="true"
      Encoding="UTF-8" />
    
    <ItemGroup>
      <FileWrites Include="$(_WixNuGetPackager_GeneratedNuspecFile)" />
    </ItemGroup>
    
  </Target>
  
  <!-- Create the nuget package using 'nuget pack' -->
  <Target 
    Name="_WixNuGetPackager_CreatePackage"
    Inputs="$(_WixNuGetPackager_GeneratedNuspecFile);$(_WixNuGetPackager_RenamedPackageIdDotTargetsFile);$(TargetPath)"
    Outputs="$(_WixNuGetPackager_PackageCreatedSuccessFile)"
    DependsOnTargets="
      WixNuGetPackagerPrepare;
      _WixNuGetPackager_CreateNuspecFile;
      _WixNuGetPackager_CreateRenamedPackageBuildFiles"
    BeforeTargets="_CleanGetCurrentAndPriorFileWrites"
    Condition=" $(WixNuGetPackagerEnabled) == 'true' ">   
    
    <!-- Prepare properties for nuspec replacement tokens -->
    <ItemGroup>
      <_WixNuGetPackager_TokenProperty 
        Include="id">
        <Value>$(WixNuGetPackageId.Replace('"', '\"'))</Value>
      </_WixNuGetPackager_TokenProperty>
      <_WixNuGetPackager_TokenProperty 
        Include="version"
        Condition=" $(WixNuGetPackageVersion) != '' ">
        <Value>$(WixNuGetPackageVersion.Replace('"', '\"'))</Value>
      </_WixNuGetPackager_TokenProperty>
      <_WixNuGetPackager_TokenProperty 
        Include="author"
        Condition=" $(WixNuGetPackageAuthor) != '' ">
        <Value>$(WixNuGetPackageAuthor.Replace('"', '\"'))</Value>
      </_WixNuGetPackager_TokenProperty>
      <_WixNuGetPackager_TokenProperty 
        Include="description"
        Condition=" $(WixNuGetPackageDescription) != '' ">
        <Value>$(WixNuGetPackageDescription.Replace('"', '\"'))</Value>
      </_WixNuGetPackager_TokenProperty>
    </ItemGroup>
    
    <PropertyGroup>
      <_WixNuGetPackager_TokenProperties Condition=" '@(_WixNuGetPackager_TokenProperty)' != '' ">-Properties @(_WixNuGetPackager_TokenProperty->'%(Identity)="%(Value)"')</_WixNuGetPackager_TokenProperties>      
      <_WixNuGetPackager_NonInteractiveSwitch Condition=" '$(VisualStudioVersion)' != '' AND '$(OS)' == 'Windows_NT' ">-NonInteractive</_WixNuGetPackager_NonInteractiveSwitch>
      <_WixNuGetPackager_NuGetPackCommand>$(_WixNuGetPackager_NuGetCommand) pack "$(_WixNuGetPackager_GeneratedNuspecFile)" $(_WixNuGetPackager_TokenProperties) $(_WixNuGetPackager_NonInteractiveSwitch)</_WixNuGetPackager_NuGetPackCommand>
    </PropertyGroup>
    
    <Exec
      Command="$(_WixNuGetPackager_NuGetPackCommand)"
      WorkingDirectory="$(_WixNuGetPackager_IntermediateNuGetPackOutputDirectory)"
      Condition=" '$(OS)' != 'Windows_NT' " />

    <Exec
      Command="$(_WixNuGetPackager_NuGetPackCommand)"
      WorkingDirectory="$(_WixNuGetPackager_IntermediateNuGetPackOutputDirectory)"
      LogStandardErrorAsError="true"
      Condition=" '$(OS)' == 'Windows_NT' " />

    <ItemGroup>
      <_WixNuGetPackager_NuGetPackIntermediateFiles Include="$(_WixNuGetPackager_IntermediateNuGetPackOutputDirectory)**" />
      <FileWrites Include="@(_WixNuGetPackager_NuGetPackIntermediateFiles)" />
    </ItemGroup>
      
    <ItemGroup>
    
      <WixNuGetPackageIntermediatePackage
        Include="@(_WixNuGetPackager_NuGetPackIntermediateFiles)"
        Condition=" '%(_WixNuGetPackager_NuGetPackIntermediateFiles.Extension)' == '.nupkg' " />
    
    </ItemGroup>
    
    <Touch
      Files="$(_WixNuGetPackager_PackageCreatedSuccessFile)"
      AlwaysCreate="true"/>      

    <!-- Note: We don't use the TouchedFiles output property of the Touch task
         as this won't add the file to FileWrites if this target is skipped during
         incremental build. -->
    <ItemGroup>
      <FileWrites Include="$(_WixNuGetPackager_PackageCreatedSuccessFile)"/>
    </ItemGroup>
    
  </Target>
  
  <!-- Copy the file(s) produced by 'nuget pack' to the required output directory. As per similar examples in 
       Microsoft.Common.targets, this target is not "optimised" for incremental build using the Inputs and Outputs
       attributes. However, SkipUnchangedFiles is 'true' by default, which has a similar effect. This arrangement
       also ensures correct FileWrites behaviour. -->
  <Target
    Name="_WixNuGetPackager_CopyFilesToOutput"
    DependsOnTargets="_WixNuGetPackager_CreatePackage"
    Condition=" $(WixNuGetPackagerEnabled) == 'true' ">
  
    <Copy
        SourceFiles="@(_WixNuGetPackager_NuGetPackIntermediateFiles)"
        DestinationFolder="$(WixNuGetPackagerOutputDirectory)"
        SkipUnchangedFiles="$(SkipCopyUnchangedFiles)"
        OverwriteReadOnlyFiles="true"
        Retries="$(CopyRetryCount)"
        RetryDelayMilliseconds="$(CopyRetryDelayMilliseconds)"
        UseHardlinksIfPossible="$(CreateHardLinksForCopyFilesToOutputDirectoryIfPossible)"
        Condition=" $(WixNuGetPackagerCopyOutputToOutputDirectory) == 'true' ">

      <Output TaskParameter="DestinationFiles" ItemName="WixNuGetPackagerOutputFiles"/>
      <Output TaskParameter="DestinationFiles" ItemName="FileWrites"/>

    </Copy>

    <ItemGroup>
    
      <WixNuGetPackagerOutputPackage
        Include="@(WixNuGetPackagerOutputFiles)"
        Condition=" '%(WixNuGetPackagerOutputFiles.Extension)' == '.nupkg' " />
    
    </ItemGroup>
    
  </Target>
  
  <Target
    Name="WixNuGetPackagerCreatePackage"
    DependsOnTargets="
      _WixNuGetPackager_CreatePackage;
      _WixNuGetPackager_CopyFilesToOutput"
    AfterTargets="Build"
    Condition=" $(WixNuGetPackagerEnabled) == 'true' "/>

</Project>
